function setVariables(obj)

    import DebuggerKit.Debugger.printDebugMessage

    printDebugMessage('Dingi:AnalysisKit:bigoSalinityInjectionAnalysis:setVariables:settingVariables',...
        'Info','Setting variables ...')
    
    info                = obj.Parent.data.info;
    info.DeviceDomain   = cat(1,info{:,'MeasuringDevice'}.DeviceDomain);
    info.WorldDomain    = cat(1,info{:,'MeasuringDevice'}.WorldDomain);
    info                = outerjoin(info,obj.Parent.HardwareConfiguration.DeviceDomainMetadata,...
                            'LeftKeys',         'DeviceDomain',...
                            'RightKeys',        'DeviceDomain',...
                            'MergeKeys',        true,...
                            'Type',             'left');

    % Variables that should be used are dependant variables in the 
    % bigoDeployment data pools that match any of the deviceDomain of 
    % property 'FitDeviceDomains'
    measuringDevice = GearKit.measuringDevice.empty;
    infoIndex       = NaN(3,obj.NDeviceDomains); % Order: conductivity, salinity, temperature
    for dd = 1:obj.NDeviceDomains
        mask	= info{:,'DeviceDomain'} == obj.DeviceDomains(dd) & ...
                  info{:,'WorldDomain'} == 'BenthicWaterColumn';
    
        % Find the conductivity variables
        maskConductivity = ...
            mask & ...
            info{:,'Type'} == 'Dependent' & ...
            info{:,'Variable'} == 'Conductivity' & ...
            ismember({info{:,'Variable'}.Unit}','mS cm⁻¹') & ...
            [info{:,'MeasuringDevice'}.Type]' == 'BigoConductivityCell';
        printDebugMessage('Dingi:AnalysisKit:bigoSalinityInjectionAnalysis:setVariables:hardcodedConductivityUnitWarning',...
                'Warning','Only conductivities with units of mS cm⁻¹ are implemented to be used right now.')
            
        assert(sum(maskConductivity) == 1,...
            'Dingi:AnalysisKit:bigoSalinityInjectionAnalysis:setVariables:noValidConductivityVariableFound',...
          	'Expected exactly one conductivity variable for device domain %s. Found %u instead.',char(obj.DeviceDomains(dd)),sum(maskConductivity))
        
        measuringDevice(dd) = info{maskConductivity,'MeasuringDevice'};
        infoIndex(1,dd)     = find(maskConductivity);

        % Find the salinity variables corresponding to the conductivity variables
        maskSalinity = ...
            mask & ...
            info{:,'Type'} == 'Dependent' & ...
            info{:,'Variable'} == 'Salinity' & ...
            ismember({info{:,'Variable'}.Unit}','PSU') & ...
            any(info{:,'MeasuringDevice'} == measuringDevice(dd),2);
        printDebugMessage('Dingi:AnalysisKit:bigoSalinityInjectionAnalysis:setVariables:hardcodedSalinityUnitWarning',...
                'Warning','Only salinities with units of PSU are implemented to be used right now.')
        assert(sum(maskSalinity) == 1,...
            'Dingi:AnalysisKit:bigoSalinityInjectionAnalysis:setVariables:noValidConductivityVariableFound',...
          	'Expected exactly one salinity variable for device domain %s. Found %u instead.',char(obj.DeviceDomains(dd)),sum(maskSalinity))
        
        infoIndex(2,dd)     = find(maskSalinity);

        % Find the temperature variables corresponding to the conductivity variables
        maskTemperature = ...
            mask & ...
            info{:,'Type'} == 'Dependent' & ...
            info{:,'Variable'} == 'Temperature' & ...
            ismember({info{:,'Variable'}.Unit}','°C') & ...
            any(info{:,'MeasuringDevice'} == measuringDevice(dd),2);
        assert(sum(maskTemperature) == 1,...
            'Dingi:AnalysisKit:bigoSalinityInjectionAnalysis:setVariables:noValidTemperatureVariableFound',...
          	'Expected exactly one temperature variable for device domain %s. Found %u instead.',char(obj.DeviceDomains(dd)),sum(maskTemperature))
        
        infoIndex(3,dd)     = find(maskTemperature);
    end
    
    % Set properties
    obj.PoolIndex           = reshape(info{infoIndex,'DataPoolIndex'},[],obj.NDeviceDomains);
    obj.VariableIndex       = reshape(info{infoIndex,'VariableIndex'},[],obj.NDeviceDomains);
    obj.DataDeviceDomains	= reshape(info{infoIndex(1,:),'DeviceDomain'},[],obj.NDeviceDomains);
    obj.DataReferenceVolume	= reshape(info{infoIndex(1,:),'VolumeViaHeight'},[],obj.NDeviceDomains);
    obj.DataOriginTime      = reshape(info{infoIndex(1,:),'ExperimentStart'},[],obj.NDeviceDomains);
    obj.DataVariables       = info{infoIndex(:,1),'Variable'};
    
    printDebugMessage('Dingi:AnalysisKit:bigoSalinityInjectionAnalysis:setVariables:settingFitVariables',...
        'Info','Setting variables ... done')
end
