classdef (SharedTestFixtures = { ...
            matlab.unittest.fixtures.PathFixture(subsref(strsplit(mfilename('fullpath'),'/+'),substruct('{}',{':'})))
        }) saveLoad_test < matlab.unittest.TestCase

    % run:
    % tests = matlab.unittest.TestSuite.fromClass(?Tests.GearKit.bigoDeployment.saveLoad_test);
    % run(tests)

    properties
        GearDeploymentInstance
        TemporaryFolder
        Filenames
    end
    properties (ClassSetupParameter)
        % Creates data pools with a single (s) or multiple (m),
        % independent (I) or dependent (D) variables.
        Data1	= struct('IsDs',            struct('Variable',          {{'Time','Oxygen'}},...
                                                   'Data',              cat(2,linspace(0,3600,16000)',randn(16000,1)),...
                                                   'VariableOrigin',    {{datetime(2020,10,2,15,32,50),0}},...
                                                   'VariableType',      {{'Independent','Dependent'}}),...
                         'ImDs',            struct('Variable',          {{'Time','Depth','Oxygen'}},...
                                                   'Data',              cat(2,linspace(0,3600,16000)',reshape(repmat(0:15,1000,1),[],1),randn(16000,1)),...
                                                   'VariableOrigin',    {{datetime(2020,10,2,15,32,50),0,0}},...
                                                   'VariableType',      {{'Independent','Independent','Dependent'}}),...
                         'IsDm',            struct('Variable',          {{'Time','Nitrate','Oxygen'}},...
                                                   'Data',              cat(2,linspace(0,3600,16000)',randn(16000,1),randn(16000,1)),...
                                                   'VariableOrigin',    {{datetime(2020,10,2,15,32,50),0,0}},...
                                                   'VariableType',      {{'Independent','Dependent','Dependent'}}),...
                         'ImDm',            struct('Variable',          {{'Time','Depth','Nitrate','Oxygen'}},...
                                                   'Data',              cat(2,linspace(0,3600,16000)',reshape(repmat(0:15,1000,1),[],1),randn(16000,1),randn(16000,1)),...
                                                   'VariableOrigin',    {{datetime(2020,10,2,15,32,50),0,0,0}},...
                                                   'VariableType',      {{'Independent','Independent','Dependent','Dependent'}})...
                        )
        Data2	= struct('IsDs',            struct('Variable',          {{'Time','Oxygen'}},...
                                                   'Data',              cat(2,linspace(0,3600,31000)',randn(31000,1)),...
                                                   'VariableOrigin',    {{datetime(2020,10,2,15,32,50),0}},...
                                                   'VariableType',      {{'Independent','Dependent'}}),...
                         'ImDs',            struct('Variable',          {{'Time','Depth','Oxygen'}},...
                                                   'Data',              cat(2,linspace(0,3600,31000)',reshape(repmat(0:30,1000,1),[],1),randn(31000,1)),...
                                                   'VariableOrigin',    {{datetime(2020,10,2,15,32,50),0,0}},...
                                                   'VariableType',      {{'Independent','Independent','Dependent'}}),...
                         'IsDm',            struct('Variable',          {{'Time','Nitrate','Oxygen'}},...
                                                   'Data',              cat(2,linspace(0,3600,31000)',randn(31000,1),randn(31000,1)),...
                                                   'VariableOrigin',    {{datetime(2020,10,2,15,32,50),0,0}},...
                                                   'VariableType',      {{'Independent','Dependent','Dependent'}}),...
                         'ImDm',            struct('Variable',          {{'Time','Z','Nitrate','Oxygen'}},...
                                                   'Data',              cat(2,linspace(0,3600,31000)',reshape(repmat(0:30,1000,1),[],1),randn(31000,1),randn(31000,1)),...
                                                   'VariableOrigin',    {{datetime(2020,10,2,15,32,50),0,0,0}},...
                                                   'VariableType',      {{'Independent','Independent','Dependent','Dependent'}})...
                        )
    end
    properties (MethodSetupParameter)

    end
    properties (TestParameter)

    end

    methods (TestClassSetup)
        function setDebuggerLevel(testCase)
            DebuggerKit.Debugger('Level','FatalError');
        end
        function createTemporaryDirectory(testCase)

            import matlab.unittest.fixtures.TemporaryFolderFixture

            testCase.TemporaryFolder = testCase.applyFixture(TemporaryFolderFixture);
        end
        function createGearDeployment(testCase,Data1,Data2)
            import GearKit.bigoDeployment
            % Create a data pool before every test is run
            dp      = DataKit.dataPool();
            dp      = dp.addVariable(Data1.Variable,Data1.Data,...
                        'VariableType',     Data1.VariableType,...
                        'VariableOrigin',   Data1.VariableOrigin);

            % Add second pool
            dp      = dp.addVariable(Data2.Variable,Data2.Data,...
                        'VariableType',     Data2.VariableType,...
                        'VariableOrigin',   Data2.VariableOrigin);


            bigo        = bigoDeployment;
            bigo.data   = dp;
            bigo.timeDeployment         = datetime(2020,10,2,15,42,50);
            bigo.timeOfInterestStart    = datetime(2020,10,2,15,52,50);
            bigo.timeOfInterestEnd      = datetime(2020,10,2,19,32,38);
            bigo.timeRecovery           = datetime(2020,10,2,19,42,38);

            testCase.GearDeploymentInstance = bigo;
        end
    end
    methods (TestMethodSetup)
        function saveDeployment(testCase)
            filenames = testCase.GearDeploymentInstance.save(testCase.TemporaryFolder.Folder);

            testCase.Filenames = filenames;
        end
    end
    methods (TestMethodTeardown)

    end

    methods (Test)
        function testLoadedDeploymentContent(testCase)
            
            loadedBigoDeployment	= GearKit.bigoDeployment.load(testCase.Filenames{1});

            metadata        = eval(['?',class(loadedBigoDeployment)]);
            propertyNames   = {metadata.PropertyList.Name}';
            needsComparing  = find(~any(cat(2,cat(1,metadata.PropertyList.Transient),...
                                              cat(1,metadata.PropertyList.Constant),...
                                              cat(1,metadata.PropertyList.Dependent),...
                                              strcmp(propertyNames,'MatFile'),...
                                              strcmp(propertyNames,'LoadFile'),...
                                              strcmp(propertyNames,'SaveFile'),...
                                              strcmp(propertyNames,'DataStructureVersion')),2));
                                    
            nProperties     = numel(needsComparing);
            propertyIsEqual = false(nProperties,1);
            for ii = 1:nProperties
                propertyIsEqual(ii)     = isequal(loadedBigoDeployment.(propertyNames{needsComparing(ii)}),testCase.GearDeploymentInstance.(propertyNames{needsComparing(ii)}));
                
                testCase.verifyTrue(propertyIsEqual(ii),sprintf('''%s'' is not equal.',propertyNames{ii}));
            end
        end
	end
end
