classdef (SharedTestFixtures = { ...
            matlab.unittest.fixtures.PathFixture(subsref(strsplit(mfilename('fullpath'),'/+'),substruct('{}',{':'})))
        }) dimension_test < matlab.unittest.TestCase
    % getDimensionality_test  Unittests for DataKit.Units.dimension.dimension
    % This class holds the unittests for the DataKit.Units.dimension.dimension
    % method.
    %
    % It can be run with runtests('Tests.DataKit.Units.dimension.dimension_test').
    %
    %
    % Copyright (c) 2022-2022 David Clemens (dclemens@geomar.de)
    %
    
    properties
        
    end
    properties (MethodSetupParameter)
        
    end
    properties (TestParameter)
        Name = struct(...
            'baseDimNoValue', struct(...
                'Name',                 {'length'},...
                'Value',                {[]},...
                'ExpName',              {'length'},...
                'ExpDimensions',        {{'length'}},...
                'ExpDegrees',           1,...
                'ExpIsBaseDimension',   true),...
            'baseDimAsValue', struct(...
                'Name',                 {'velocity'},...
                'Value',                {DataKit.Units.dimension('length')/DataKit.Units.dimension('time')},...
                'ExpName',              {'velocity'},...
                'ExpDimensions',        {{'length';'time'}},...
                'ExpDegrees',           [1;-1],...
                'ExpIsBaseDimension',   false),...
            'nonBaseDimAsValue', struct(...
                'Name',                 {'acceleration'},...
                'Value',                {DataKit.Units.dimension('velocity',DataKit.Units.dimension('length')/DataKit.Units.dimension('time'))/DataKit.Units.dimension('time')},...
                'ExpName',              {'acceleration'},...
                'ExpDimensions',        {{'length';'time'}},...
                'ExpDegrees',           [1;-2],...
                'ExpIsBaseDimension',   false),...
            'nameAsExpression', struct(...
                'Name',                 {'[length]/[time]'},...
                'Value',                {[]},...
                'ExpName',              {'[length]*[time]^-1'},...
                'ExpDimensions',        {{'[length]';'[time]'}},...
                'ExpDegrees',           [1;-1],...
                'ExpIsBaseDimension',   false))
        Errors = struct(...
            'nonCharName', struct(...
                'Name',                 {3},...
                'Value',                {[]},...
                'ExpErrorId',           'MATLAB:dimension:invalidType'),...
            'numericName', struct(...
                'Name',                 {'3'},...
                'Value',                {[]},...
                'ExpErrorId',           'Dingi:DataKit:Units:dimension:dimension:InvalidName'),...
            'nonUnityValue', struct(...
                'Name',                 {'length'},...
                'Value',                {3},...
                'ExpErrorId',           'Dingi:DataKit:Units:dimension:dimension:InvalidValue'),...
            'nonNumericValue', struct(...
                'Name',                 {'length'},...
                'Value',                {'value'},...
                'ExpErrorId',           'MATLAB:dimension:invalidType'),...
            'invalidExpression', struct(...
                'Name',                 {'length^length'},...
                'Value',                {[]},...
                'ExpErrorId',           'Dingi:DataKit:Units:Parser:evalTreeNode:getDimensionality:NonMultiplicativeExpression'))
    end
    
    methods (TestClassSetup)
        
    end
    methods (TestMethodSetup)
        
    end
    methods (TestMethodTeardown)
        
    end
    
    methods (Test)
        %%{
        function testValidDimensions(testCase,Name)
            
            import DataKit.Units.dimension
            
            name    = Name.Name;
            value   = Name.Value;
            if isempty(value)
                act     = dimension(name);
            else
                act     = dimension(name,value);
            end
            
            testCase.verifyEqual(act.Name,Name.ExpName, 'Dimension name does not match.')
            testCase.verifyEqual(act.Dimensions,Name.ExpDimensions, 'List of occurring dimensions does not match.')
            testCase.verifyEqual(act.Degrees,Name.ExpDegrees, 'List of occurring dimension degrees does not match.')
            testCase.verifyEqual(act.IsBaseDimension,Name.ExpIsBaseDimension, 'Base dimension flag not set correctly.')
        end
        %}
        function testErrors(testCase,Errors)
            
            import DataKit.Units.dimension
            
            name    = Errors.Name;
            value   = Errors.Value;
            if isempty(value)
                testCase.verifyError(@() dimension(name),Errors.ExpErrorId)
            else
                testCase.verifyError(@() dimension(name,value),Errors.ExpErrorId)
            end
        end
    end
end
