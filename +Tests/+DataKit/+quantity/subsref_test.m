classdef (SharedTestFixtures = { ...
            matlab.unittest.fixtures.PathFixture(subsref(strsplit(mfilename('fullpath'),'/+'),substruct('{}',{':'})))
        }) subsref_test < matlab.unittest.TestCase
    % subsref_test  Unittests for DataKit.quantity.subsref
    % This class holds the unittests for the DataKit.quantity.subsref method.
    %
    % It can be run with runtests('Tests.DataKit.quantity.subsref_test').
    %
    %
    % Copyright (c) 2022-2022 David Clemens (dclemens@geomar.de)
    %
    
    properties
        A = [...
             5     3   -25
            -7    11   103]
        Sigma = [...
             0.1   0.8   2.1
             0.35  0     4]
        Flag = uint8([...
            17    24     5
             4     8    20])
        Q
    end
    properties (MethodSetupParameter)
        
    end
    properties (TestParameter)
        % {IndexType}_{SubscriptType}_{Index1Shape}_{Index2Shape}
        % Where:
        %   IndexType: lInd (linear index), sub (subscripted index)
        %   SubscriptType: Par ('()'), dot ('.'), brace ('{}') 
        %   Index1Shape: S (scalar), V (vector)
        %   Index2Shape: S (scalar), V (vector)
        subPar = struct(...
            'lInd_par_S', 	struct(...
                                'type',     {'()'},...
                                'subs',     {{3}},...
                                'expA',     3,...
                                'expSigma', 0.8,...
                                'expFlag',  uint8(24)),...
            'lInd_par_VS', 	struct(...
                                'type',     {'()'},...
                                'subs',     {{[3,5,6]}},...
                                'expA',     [3,-25,103],...
                                'expSigma', [0.8,2.1,4],...
                                'expFlag',  uint8([24,5,20])),...
            'sub_par_S_S', 	struct(...
                                'type',     {'()'},...
                                'subs',     {{2,3}},...
                                'expA',     103,...
                                'expSigma', 4,...
                                'expFlag',  uint8(20)),...
            'sub_par_S_V', 	struct(...
                                'type',     {'()'},...
                                'subs',     {{2,2:3}},...
                                'expA',     [11,103],...
                                'expSigma', [0,4],...
                                'expFlag',  uint8([8,20])),...
            'sub_par_V_S', 	struct(...
                                'type',     {'()'},...
                                'subs',     {{1:2,2}},...
                                'expA',     [3;11],...
                                'expSigma', [0.8;0],...
                                'expFlag',  uint8([24;8])),...
            'sub_par_V_V', 	struct(...
                                'type',     {'()'},...
                                'subs',     {{1:2,[1,3]}},...
                                'expA',     [5,-25;-7,103],...
                                'expSigma', [0.1,2.1;0.35,4],...
                                'expFlag',  uint8([17,5;4,20])),...
            'sub_par_L', 	struct(...
                                'type',     {'()'},...
                                'subs',     {{logical([0,0,0;0,1,0])}},...
                                'expA',     11,...
                                'expSigma', 0,...
                                'expFlag',  uint8(8))...
            );
    end
    
    methods (TestClassSetup)
        function createInitialBitmask(testCase)
            
            import DataKit.quantity
            
            testCase.Q = quantity(testCase.A,testCase.Sigma,testCase.Flag);
        end
    end
    methods (TestMethodSetup)
        
    end
    methods (TestMethodTeardown)
    end
    
    methods (Test)
        function testParenthesisSubsref(testCase,subPar)
            
            actQ	= subsref(testCase.Q,substruct(subPar.type,subPar.subs));
            
            act     = cat(3,double(actQ),actQ.Sigma,double(actQ.Flag.Bits));
            exp     = cat(3,subPar.expA,subPar.expSigma,double(subPar.expFlag));
            
            testCase.verifyEqual(act,exp);
        end
    end
end
