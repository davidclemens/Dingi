classdef (SharedTestFixtures = { ...
            matlab.unittest.fixtures.PathFixture(subsref(strsplit(mfilename('fullpath'),'/+'),substruct('{}',{':'})))
        }) plus_test < matlab.unittest.TestCase
    % plus_test  Unittests for DataKit.quantity.plus
    % This class holds the unittests for the DataKit.quantity.plus method.
    %
    % It can be run with runtests('Tests.DataKit.quantity.plus_test').
    %
    %
    % Copyright (c) 2022-2022 David Clemens (dclemens@geomar.de)
    %
    
    properties
        A = DataKit.quantity(4,0.2,3)
    end
    properties (MethodSetupParameter)
        
    end
    properties (TestParameter)
        % SummandType either positive (pos), negative (neg), zero (zer), nan (NaN), 
        % posinf (Inf) or neginf (-Inf)
        BValue = struct(...
            'pos',      struct(...
                'Value',    8,...
                'expValue', 12),...
            'neg',      struct(...
                'Value',    -20,...
                'expValue', -16),...
            'zer',      struct(...
                'Value',    0,...
                'expValue', 4),...
            'nan',      struct(...
                'Value',    NaN,...
                'expValue', NaN),...
            'neginf',  	struct(...
                'Value',    -Inf,...
                'expValue', -Inf),...
            'posinf',   struct(...
                'Value',    Inf,...
                'expValue', Inf)...
            );
        
        % Uncertainty either positive (pos), zero (zer) or NaN (nan)
        BSigma = struct(...
            'pos',      struct(...
                'Sigma',    0.1,...
                'expSigma', sqrt(.1^2+.2^2)),...
            'zer',      struct(...
                'Sigma',    0,...
                'expSigma', .2),...
            'nan',      struct(...
                'Sigma',    NaN,...
                'expSigma', NaN)...
            );
        
        % Flag 
        BFlag = struct(...
            'match',    struct(...
                'Flag',     14,...
                'expFlag',  15)...
            );
        
        % Shapes: scalar (S), row vector (VR), column vector (VC) or matrix (M)
        BSize = struct(...
            'S',        struct(...
                'sz',       [1,1],...
                'expSz',    [1,1]),...
            'VR',        struct(...
                'sz',       [1,5],...
                'expSz',    [1,5]),...
            'VC',        struct(...
                'sz',       [3,1],...
                'expSz',    [3,1]),...
            'M',         struct(...
                'sz',       [3,2],...
                'expSz',    [3,2])...
            )
    end
    
    methods (TestClassSetup)
        
    end
    methods (TestMethodSetup)
        
    end
    methods (TestMethodTeardown)
        
    end
    
    methods (Test)
        function testPlusArithmetic(testCase,BValue,BSigma,BFlag)
            
            B       = DataKit.quantity(BValue.Value,BSigma.Sigma,BFlag.Flag);
            actQ    = testCase.A + B;
            
            act     = cat(3,double(actQ),actQ.Sigma,double(actQ.Flag.Bits));
            exp     = cat(3,BValue.expValue,BSigma.expSigma,BFlag.expFlag);
            
            testCase.verifyEqual(act,exp);
        end
        function testPlusShapeCombinations(testCase,BSize)
            
            value   = 20.*rand(BSize.sz) - 10;
            B       = DataKit.quantity(value,zeros(BSize.sz),zeros(BSize.sz));
            actQ    = testCase.A + B;
            
            act     = cat(3,double(actQ),actQ.Sigma,double(actQ.Flag.Bits));
            exp     = cat(3,double(testCase.A) + value,repmat(testCase.A.Sigma,BSize.sz),repmat(double(testCase.A.Flag.Bits),BSize.sz));
            
            testCase.verifyEqual(act,exp);
        end
    end
end
